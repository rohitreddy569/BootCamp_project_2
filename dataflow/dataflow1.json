{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "product_csv",
						"type": "DatasetReference"
					},
					"name": "products"
				},
				{
					"dataset": {
						"referenceName": "sales_json",
						"type": "DatasetReference"
					},
					"name": "sales"
				},
				{
					"dataset": {
						"referenceName": "customers",
						"type": "DatasetReference"
					},
					"name": "customers"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "join1"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "surrogateKey2"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "ModifyColumns1",
					"description": "Autogenerated by data preview actions"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ProductID as integer,",
				"          ProductName as string,",
				"          Category as string,",
				"          Price as integer,",
				"          StockQuantity as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> products",
				"source(output(",
				"          CustomerID as integer,",
				"          ProductID as integer,",
				"          Quantity as integer,",
				"          SaleDate as date,",
				"          SaleID as integer,",
				"          TotalAmount as float,",
				"          amount as float,",
				"          category as integer,",
				"          date as date,",
				"          id as integer,",
				"          value1 as integer,",
				"          value2 as integer,",
				"          value3 as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine',",
				"     unquotedColumnNames: true,",
				"     hasComments: true,",
				"     singleQuoted: true,",
				"     backslashEscape: true) ~> sales",
				"source(output(",
				"          CustomerID as string,",
				"          CustomerName as string,",
				"          Email as string,",
				"          Phone as string,",
				"          City as string,",
				"          Country as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> customers",
				"sales derive(final_quantity = iif(!isNull(Quantity), Quantity, iif(!isNull(value3),value3 , category)),",
				"          final_CustomerID = iif(!isNull(CustomerID), CustomerID, value1),",
				"          final_ProductID = iif(!isNull(ProductID), ProductID, value2),",
				"          final_SaleID = iif(!isNull(SaleID), SaleID, id),",
				"          final_SaleDate = iif(!isNull(SaleDate), SaleDate, date),",
				"          final_TotalAmount = iif(!isNull(TotalAmount), TotalAmount, amount)) ~> derivedColumn1",
				"derivedColumn1 select(mapColumn(",
				"          Quantity = final_quantity,",
				"          CustomerID = final_CustomerID,",
				"          ProductID = final_ProductID,",
				"          SaleID = final_SaleID,",
				"          SaleDate = final_SaleDate,",
				"          TotalAmount = final_TotalAmount",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"products filter(ERROR_FUNCTION('')) ~> filter1",
				"select1 derive(Quantity = iif(isNull(Quantity), 0 , Quantity)) ~> derivedColumn2",
				"derivedColumn2 aggregate(avg_TotalAmount = avg(TotalAmount)) ~> aggregate1",
				"surrogateKey1, surrogateKey2 join(surrogateKey1@surr_key == surrogateKey2@surr_key,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"derivedColumn2 keyGenerate(output(surr_key as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"ModifyColumns1 keyGenerate(output(surr_key as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey2",
				"join1 derive(new_TotalAmount = iif(isNull(TotalAmount), avg_TotalAmount, TotalAmount)) ~> derivedColumn3",
				"aggregate1 derive(avg_TotalAmount = toFloat(avg_TotalAmount)) ~> ModifyColumns1"
			]
		}
	}
}